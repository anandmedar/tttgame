{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/anand/Local/Reactjs/tic-tac-toe/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\nconst styles = {\n  width: '200px',\n  margin: '20px auto'\n};\n\nconst Game = () => {\n  _s();\n\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n\n  const handleClick = i => {\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    const squares = [...current]; // If user click an occupied square or if game is won, return\n\n    if (winner || squares[i]) return; // Put an X or an O in the clicked square\n\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXisNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () => history.map((_step, move) => {\n    const destination = move ? `Got to move #${move}` : 'Go to start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: destination\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this);\n  });\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      squares: history[stepNumber],\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles,\n      children: [winner ? 'Winner: ' + winner : 'Next Player: ' + (xIsNext ? 'X' : 'O'), renderMoves()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Game, \"V3+a/ZTmkvRnT4Btg7cxhfZdpO4=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/anand/Local/Reactjs/tic-tac-toe/src/components/Game.js"],"names":["React","useState","calculateWinner","Board","styles","width","margin","Game","history","setHistory","Array","fill","stepNumber","setStepNumber","xIsNext","setXisNext","winner","handleClick","i","timeInHistory","slice","current","squares","length","jumpTo","step","renderMoves","map","_step","move","destination"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,YAAhC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,KAAK,EAAE,OADM;AAEbC,EAAAA,MAAM,EAAE;AAFK,CAAf;;AAKA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,CAACS,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAD,CAAtC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAMe,MAAM,GAAGd,eAAe,CAACM,OAAO,CAACI,UAAD,CAAR,CAA9B;;AAEA,QAAMK,WAAW,GAAGC,CAAC,IAAI;AACvB,UAAMC,aAAa,GAAGX,OAAO,CAACY,KAAR,CAAc,CAAd,EAAiBR,UAAU,GAAG,CAA9B,CAAtB;AACA,UAAMS,OAAO,GAAGF,aAAa,CAACP,UAAD,CAA7B;AACA,UAAMU,OAAO,GAAG,CAAC,GAAGD,OAAJ,CAAhB,CAHuB,CAIvB;;AACA,QAAIL,MAAM,IAAIM,OAAO,CAACJ,CAAD,CAArB,EAA0B,OALH,CAMvB;;AACAI,IAAAA,OAAO,CAACJ,CAAD,CAAP,GAAaJ,OAAO,GAAG,GAAH,GAAS,GAA7B;AACAL,IAAAA,UAAU,CAAC,CAAC,GAAGU,aAAJ,EAAmBG,OAAnB,CAAD,CAAV;AACAT,IAAAA,aAAa,CAACM,aAAa,CAACI,MAAf,CAAb;AACAR,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAXD;;AAaA,QAAMU,MAAM,GAAGC,IAAI,IAAI;AACrBZ,IAAAA,aAAa,CAACY,IAAD,CAAb;AACAV,IAAAA,UAAU,CAACU,IAAI,GAAG,CAAP,KAAa,CAAd,CAAV;AACD,GAHD;;AAKA,QAAMC,WAAW,GAAG,MAClBlB,OAAO,CAACmB,GAAR,CAAY,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAC3B,UAAMC,WAAW,GAAGD,IAAI,GAAI,gBAAeA,IAAK,EAAxB,GAA4B,aAApD;AACA,wBACE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAML,MAAM,CAACK,IAAD,CAA7B;AAAA,kBAAsCC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF,OAASD,IAAT;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GAPD,CADF;;AAUA,sBACE;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAErB,OAAO,CAACI,UAAD,CAAvB;AAAqC,MAAA,OAAO,EAAEK;AAA9C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,KAAK,EAAEb,MAAZ;AAAA,iBACGY,MAAM,GAAG,aAAaA,MAAhB,GAAyB,mBAAmBF,OAAO,GAAG,GAAH,GAAS,GAAnC,CADlC,EAEGY,WAAW,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AASD,CA3CD;;GAAMnB,I;;KAAAA,I;AA6CN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\n\nconst styles = {\n  width: '200px',\n  margin: '20px auto'\n};\n\nconst Game = () => {\n  const [history, setHistory] = useState([Array(9).fill(null)]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(true);\n  const winner = calculateWinner(history[stepNumber]);\n \n  const handleClick = i => {\n    const timeInHistory = history.slice(0, stepNumber + 1);\n    const current = timeInHistory[stepNumber];\n    const squares = [...current];\n    // If user click an occupied square or if game is won, return\n    if (winner || squares[i]) return;\n    // Put an X or an O in the clicked square\n    squares[i] = xIsNext ? 'X' : 'O';\n    setHistory([...timeInHistory, squares]);\n    setStepNumber(timeInHistory.length);\n    setXisNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXisNext(step % 2 === 0);\n  };\n\n  const renderMoves = () =>\n    history.map((_step, move) => {\n      const destination = move ? `Got to move #${move}` : 'Go to start';\n      return (\n        <li key={move}>\n          <button onClick={() => jumpTo(move)}>{destination}</button>\n        </li>\n      );\n    });\n\n  return (\n    <>\n      <Board squares={history[stepNumber]} onClick={handleClick} />\n      <div style={styles}>\n        {winner ? 'Winner: ' + winner : 'Next Player: ' + (xIsNext ? 'X' : 'O')}\n        {renderMoves()}\n      </div>\n    </>\n  );\n};\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}